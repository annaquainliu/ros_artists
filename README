Project Content: 

README
    This file! It contains the instructions to run the program. It documents 
    the hardware and software resources that we were working with when testing. 
    Feel free to use the same turtlebots and laptops to play with our program. 
    Corresponding set up instructions are included in this file.
main.py
    This is the driver file for the program. 
Processor.py
    This file contains the implementation of the Processor class, which 
    encapsulates all the logics and methods that handles the process of 
    transforming the image supplied into image contours and path coordinates. 
    An instance of the processor class is initiated by main and used to spring 
    off the image processing. The processor also initialized a planner, which 
    the processor submits the transformed paths to to be sent to the turtlebots. 
Planner.py
    This file contains the implementation of the Planner class, which handles 
    the collection and distribution of the transformed paths that the robots 
    should traverse to draw the images. It waits for the tasks in the form of 
    paths from the processor threads and handles the distributed communication 
    with the turtlebots to send these received tasks.
Artist.py
    This file contains the implementation of the Artist class, which contains 
    all of the logic that supports the turtlebots for our program. For this 
    reason, it also has an attached main definition, which simply initializes 
    an instance of the Artist class. Each Artist instance initializes a 
    connection with the main computer that hands out tasks through a python TCP 
    socket connection. Then, it listens to the connection for tasks and adds 
    them to its task queue to be executed at the earliest time possible. 


Instructions to runt the program: 

Use 2 Turtlebot for Artist Painting

    Host is MY Machine
        Computer IP: 10.5.13.238
    Artist-1
        Robot Name: 7. Baymax
        Computer: 6. Weebo
        Computer Password: turtlebot
        Computer IP: 10.5.15.131
    Artist-2
        Robot Name: 5. EVE
        Computer: MuLIP EVE
        Computer Password: turtlebot112
        Computer IP: 10.5.15.131
    What to do
        - power on Artist-1 computer
        - power on Artist-2 computer
        Get Artist.py on Artist-1
            - copy Artist.py from Host into Artist-1 by running:
                scp -r -v /Users/sophonnidy/Halligan/cs21-others/tracked/final-proj/ros_artists/Artist.py turtlebot@10.5.15.131:~/catkin_ws/src/SquirrelArtists/ros_artists/Artist.py
        Get Artist.py on Artist-2
            - copy Artist.py from Host into Artist-2 local by running:
                scp -r -v /Users/sophonnidy/Halligan/cs21-others/tracked/final-proj/ros_artists/Artist.py eve@10.5.12.45:/home/eve/turtlebot_docker/SquirrelArtists/Artist.py
            - In Artist2, run the following command to go into docker container
                docker run -it --device=/dev/kobuki --net=host --device=/dev/bus/usb/ --device=/dev/ttyUSB0 --device=/dev/ttyUSB1:/dev/rplidar -v /sys/fs/cgroup:ro turtlebot:sensar /bin/bash
            - open up a new terminal
            - copy Artist-2 local to Artist-2 docker container
                - launch a terminal in Artist-2 computer
                - go to /home/eve/turtlebot_docker
                - run the following command:
                    docker cp SquirrelArtists/Artist.py {container-id (get by doing 'docker ps -a')}:root/catkin_ws/src/cs21/
        
        BEFORE get the two robot to draws
            - in a new terminal, shh into Artist-1 computer by running:
                ssh -vvv turtlebot@10.5.15.131
            - then run:
                roslaunch turtlebot_bringup minimal.launch --screen

        Get Robot Up and Running
            Get Artist-1 to Draw
                - start a terminal on Host and run 'ssh -vvv turtlebot@10.5.15.131'
                - run the following command:
                    roslaunch turtlebot_bringup minimal.launch --screen
                - on Artist-1 computer, go to '~/catkin_ws/src/SquirrelArtists/ros_artists/' and run:
                    python Artist.py 0 0
            Get Artist-2 to Draw
                - start a new terminal on Artist-2 computer
                - go into the created docker container
                - once inside the docker container, go to 'root/catkin_ws/src/SquirrelArtists/'
                - roslaunch turtlebot_bringup minimal.launch --screen
                - start a new terminal, go into the container, and run:
                    python Artist.py 0 190

Other Notes
    - when wanting to stop, kill Artist.py program on the bot computer before kill Planner.py on Host computer

    Planning Phase
        Goal: Create a Python project using the library ROS that programs multiple robots to 
        concurrently draw an image. 

        Potential Future Ideas:
        - Robots can swap their drawing instruments with arms.
        - Arms or turtle bots can be used, or both, which can introduce more concurrency in a project. Arms can help simplify geometry and have a better fixed drawing instrument.
        - 2-3 turtlebots can have their own colors, none of them should interfere with each other.
